{# AWS VPN module template from https://github.com/terraform-aws-modules/terraform-aws-vpn-gateway #}
{% for name, vnet in vnets.items() %}
{% if vnet['spoke_vpcs'] is defined %}
{% for vpc in vnet['spoke_vpcs'] %}
{% if vpc['fw_tunnels'] is defined %}
{% for fw in vpc['fw_tunnels'] %}
module "{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}" {
  source                        = "{{ module_dir }}/vpn"
  providers                     = { aws = "aws.{{ vpc['region'] }}"}
  name                          = "{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}"
  vpc_id                        = "${module.{{ name }}-vpc-{{ vpc.name }}.vpc_id}"
  vpn_gateway_id                = "${module.{{ name }}-vpc-{{ vpc.name }}.vgw_id}"
{# Trying to provide options for supporting AWS generated PSKs / CIDRs if not defined in YAML
{% if vpc['fw_tunnels.tunnel_1_cidr'] not defined %}
  cidr_type                       = "dynamic"
{% endif %}
#}
  tunnel1_inside_cidr             = "{{ fw['tunnel_1_cidr'] }}"
  tunnel2_inside_cidr             = "{{ fw['tunnel_2_cidr'] }}"
  tunnel1_preshared_key           = "{{ fw['tunnel_1_psk'] }}"
  tunnel2_preshared_key           = "{{ fw['tunnel_2_psk'] }}"
  customer_gw_asn                 = ["{{ vnet['vnet_network']['bgp_asn'] }}"]
  customer_gw_ip                  = ["${module.{{ name }}.untrust_elastic_ip_addresses{{[loop.index0]}} }"]
  management_ips                  = "${module.{{ name }}.management_elastic_ip_addresses{{[loop.index0]}} }"
  firewall_instance_ids           = "${module.{{ name }}-firewall.firewalls_ids{{[loop.index0]}} }"

}
{% endfor %}
{% endif %}

{% endfor %}
{% endif %}
output "spoke_asns" {
 value = [{% for vpc in vnet['spoke_vpcs'] %}{% for fw in vpc['fw_tunnels'] %}"${module.{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}.spoke_asn}",{% endfor %}{% endfor %}]
}
output "spoke_vpn_names" {
 value = [{% for vpc in vnet['spoke_vpcs'] %}{% for fw in vpc['fw_tunnels'] %}"${module.{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}.spoke_vpn_name}",{% endfor %}{% endfor %}]
}
output "fws_tunnels_ips" {
 value = [{% for vpc in vnet['spoke_vpcs'] %}{% for fw in vpc['fw_tunnels'] %}"${module.{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}.fw_tunnel_ips}",{% endfor %}{% endfor %}]
}
output "vgws_tunnels_ips" {
 value = [{% for vpc in vnet['spoke_vpcs'] %}{% for fw in vpc['fw_tunnels'] %}"${module.{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}.vgw_tunnel_ips}",{% endfor %}{% endfor %}]
}
output "vgw_public_ips" {
 value = [{% for vpc in vnet['spoke_vpcs'] %}{% for fw in vpc['fw_tunnels'] %}"${module.{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}.vgw_public_ips}",{% endfor %}{% endfor %}]
}
output "spoke_firewalls" {
 value = [{% for vpc in vnet['spoke_vpcs'] %}{% for fw in vpc['fw_tunnels'] %}"${module.{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}.spoke_firewalls}",{% endfor %}{% endfor %}]
}
output "firewalls_ids" {
 value = [{% for vpc in vnet['spoke_vpcs'] %}{% for fw in vpc['fw_tunnels'] %}"${module.{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}.spoke_firewalls_ids}",{% endfor %}{% endfor %}]
}
output "tunnel_psks" {
 value = [{% for vpc in vnet['spoke_vpcs'] %}{% for fw in vpc['fw_tunnels'] %}"${module.{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}.tunnel_psks}",{% endfor %}{% endfor %}]
}
output "firewall_tunnel_ips" {
 value = [{% for vpc in vnet['spoke_vpcs'] %}{% for fw in vpc['fw_tunnels'] %}"${module.{{ name }}-vpn-{{ vpc.name }}-{{ fw.name }}.fw_tunnel_ips}",{% endfor %}{% endfor %}]
}
{% endfor %}